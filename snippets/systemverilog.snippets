extends verilog

# Foreach Loop
snippet forea
	foreach (${1}) begin
		${0}
	end
# Do-while statement
snippet dowh
	do begin
		${0}
	end while (${1});
# Combinational always block
snippet alc
	always_comb begin ${1:: statement_label}
		${0}
	end $1
# Sequential logic
snippet alff
	logic ${1:reg_name}_en;
	logic [${2:DATA_WIDTH}-1:0] next_$1;
	logic [$2-1:0] $1;
	
	assign $1_en   = 1'b1;
	assign next_$1 = '0;

	always_ff @(posedge ${3:clk} or negedge ${4:reset_n}) begin
		if (~$4) begin
			$1 <= '0;
		end else if ($1_en) begin
			$1 <= next_$1;
		end
	end
# Latched logic
snippet all
	always_latch begin ${1:: statement_label}
		${0}
	end $1
# Class
snippet cl
	class ${1:class_name};
		// data or class properties
		${0}

		// initialization
		function new();
		endfunction : new

	endclass : $1
# Typedef structure
snippet types
	typedef struct {
		${0}
	} ${1:name_t};
# Program block
snippet prog
	program ${1:program_name} ();
		${0}
	endprogram : $1
# Interface block
snippet intf
	interface ${1:program_name} ();
		// nets
		${0}
		// clocking

		// modports

	endinterface : $1
# Clocking Block
snippet clock
	clocking ${1:clocking_name} @(${2:posedge} ${3:clk});
		${0}
	endclocking : $1
# Covergroup construct
snippet cg
	covergroup ${1:group_name} @(${2:posedge} ${3:clk});
		${0}
	endgroup : $1
# Package declaration
snippet pkg
	package ${1:package_name};
		${0}
	endpackage : $1

# SVA same-cycle implication
snippet -
	|-> 

# SVA next-cycle implication
snippet =
	|=> 

# Embedded Assert
snippet ems
	\`EMB_ASSERT(${2:name},
		"${1:comment}",
		${0:/* property */}
	)

# Embedded Helper
snippet emh
	\`EMB_HELPER(${2:name}, "${1:comment}",
		${0:/* property */}
	)

# Embedded Liveness Assert
snippet emsl
	\`EMB_ASSERT_LIVE(${2:name},
		"${1:comment}",
		${0:/* property */}
	)

# Embedded Cover
snippet emc
	\`EMB_COVER(${1:name},
		${0:/* property */}
	)

# Embedded X-Check
snippet emx
	\`EMB_XCHECK(${0:/* signal */})

# Interface Assert
snippet ifs
	\`INTF_ASSERT(${1:driver}, ${3:name},
		"${2:comment}",
		${0:/* property */}
	)

# Interface Liveness Assert
snippet ifsl
	\`INTF_ASSERT_LIVE(${1:driver}, ${3:name},
		"${2:comment}",
		${0:/* property */}
	)

# Interface Cover
snippet ifc
	\`INTF_COVER(${1:name},
		${0:/* property */}
	)

# Interface X-Check
snippet ifx
	\`INTF_XCHECK(${1:driver}, ${0:/* signal */})

# For Generate
snippet forg
	for (genvar ${1:i} = ${2:0}; $1 < ${3:N}; $1++) begin : ${4:GEN}
		${0:/* code */}
	end // $4

# If Generate
snippet ifg
	generate if (${1}) begin : ${2:GEN}
		${0:/* code */}
	end endgenerate // $2
