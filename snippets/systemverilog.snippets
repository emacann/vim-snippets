extends verilog

# Foreach Loop
snippet fe
	foreach (${1}) begin
		${0}
	end
# Do-while statement
snippet dowh
	do begin
		${0}
	end while (${1});
# Combinational always block
snippet alc
	always_comb begin ${1:: statement_label}
		${0}
	end $1
# Sequential logic
snippet alff
	always_ff @(posedge ${1:clk} or negedge ${2:reset_n}) begin
		if (!$2) begin
			${3}
		end else begin
			${0}
		end
	end
	
# Latched logic
snippet all
	always_latch begin ${1:: statement_label}
		${0}
	end $1
# Class
snippet cl
	class ${1:class_name};
		// data or class properties
		${0}

		// initialization
		function new();
		endfunction : new

	endclass : $1
# Typedef structure
snippet types
	typedef struct {
		${0}
	} ${1:name_t};
# Program block
snippet prog
	program ${1:program_name} ();
		${0}
	endprogram : $1
# Interface block
snippet intf
	interface ${1:program_name} ();
		// nets
		${0}
		// clocking

		// modports

	endinterface : $1
# Clocking Block
snippet clock
	clocking ${1:clocking_name} @(${2:posedge} ${3:clk});
		${0}
	endclocking : $1
# Covergroup construct
snippet cg
	covergroup ${1:group_name} @(${2:posedge} ${3:clk});
		${0}
	endgroup : $1
# Package declaration
snippet pkg
	package ${1:package_name};
		${0}
	endpackage : $1

# Assume property
snippet am
	am__${1:name} : assume property (
		${0:/* property */}
	);
	

# Assert property
snippet as
	as__${1:name} : assert property (
		${0:/* property */}
	);
	

# Cover property
snippet co
	co__${1:name} : cover property (
		${0:/* property */}
	);
	

# SVA same-cycle implication
snippet -
	|-> 

# SVA next-cycle implication
snippet =
	|=> 

# Property
snippet pr
	property pr__${1:name};
		${0:/* property */}
	endproperty
	

# Property Assert
snippet prs
	property pr__${1:name};
		${0:/* property */}
	endproperty
	\`DISPLAY_SVA_ASSERT_ASSUME(SVA_EN, AS_EN, $1);
	

# Property Assume
snippet prm
	property pr__${1:name};
		${0:/* property */}
	endproperty
	\`DISPLAY_SVA_ASSERT_ASSUME(SVA_EN, AM_EN, $1);
	

# Embedded Assert
snippet ems
	\`EMB_ASSERT(
		${2:name},
		"${1:comment}",
		${0:/* property */}
	)
	

# Embedded Assume
snippet emm
	\`EMB_ASSERT(
		int_am__${2:name},
		"${1:comment}",
		${0:/* property */}
	)
	

# Embedded Helper
snippet emh
	\`EMB_HELPER(
		${2:name},
		"${1:comment}",
		${0:/* property */}
	)
	

# Embedded Liveness Assert
snippet emsl
	\`EMB_ASSERT_LIVE(
		${2:name},
		"${1:comment}",
		${0:/* property */}
	)
	

# Embedded Liveness Assume
snippet emml
	\`EMB_ASSERT_LIVE(
		int_am__${2:name},
		"${1:comment}",
		${0:/* property */}
	)
	

# Embedded Cover
snippet emc
	\`EMB_COVER(
		${1:name},
		${0:/* property */}
	)
	

# Symbolic Assert
snippet sys
	\`SYMB_ASSERT(
		${2:name},
		"${1:comment}",
		${0:/* property */}
	)
	

# Symbolic Assume
snippet sym
	\`SYMB_ASSUME(
		${2:name},
		"${1:comment}",
		${0:/* property */}
	)
	

# Symbolic Cover
snippet syc
	\`SYMB_COVER(
		${1:name},
		${0:/* property */}
	)
	

# Symbolic Helper
snippet syh
	\`SYMB_HELPER(
		${2:name},
		"${1:comment}",
		${0:/* property */}
	)
	

# Interface Assert
snippet ifs
	\`INTF_ASSERT(
		${1:driver},
		${3:name},
		"${2:comment}",
		${0:/* property */}
	)
	

# Interface Liveness Assert
snippet ifs
	\`INTF_ASSERT_LIVE(
		${1:driver},
		${3:name},
		"${2:comment}",
		${0:/* property */}
	)
	

# Interface Cover
snippet ifc
	\`INTF_COVER(
		${1:name},
		${0:/* property */}
	)
	

